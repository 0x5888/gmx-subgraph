type ChainlinkPrice @entity {
  id: ID!
  value: BigInt!
}

type FundingRate @entity {
  id: ID!

  startFundingRate: Int!
  endFundingRate: Int!
  token: String!
  timestamp: Int
  period: Period!
}

enum OrderStatus {
  open
  cancelled
  executed
}

type Order @entity {
  id: ID!

  type: String!
  account: String!
  status: OrderStatus!
  index: BigInt!
  size: BigInt!

  createdTimestamp: Int!
  cancelledTimestamp: Int
  executedTimestamp: Int
}

type OrderStat @entity {
  id: ID!

  openSwap: Int!
  openIncrease: Int!
  openDecrease: Int!

  cancelledSwap: Int!
  cancelledIncrease: Int!
  cancelledDecrease: Int!

  executedSwap: Int!
  executedIncrease: Int!
  executedDecrease: Int!

  period: Period!
}

enum Period {
  daily
  total
}

type UserData @entity {
  id: ID!

  actionSwapCount: Int!
  actionMarginCount: Int!
  actionMintBurnCount: Int!

  period: Period!
  timestamp: Int
}

type UserStat @entity {
  id: ID!
  uniqueCount: Int!
  uniqueSwapCount: Int!
  uniqueMarginCount: Int!
  uniqueMintBurnCount: Int!

  actionCount: Int!
  actionSwapCount: Int!
  actionMarginCount: Int!
  actionMintBurnCount: Int!

  period: Period!
  timestamp: Int
}

type AddLiquidity @entity {
  id: ID!

  account: String!
  token: String!

  amount: BigInt!
  aumInUsdg: BigInt!
  glpSupply: BigInt!
  usdgAmount: BigInt!
  mintAmount: BigInt!

  timestamp: Int!
}

type RemoveLiquidity @entity {
  id: ID!

  account: String!
  token: String!

  glpAmount: BigInt!
  aumInUsdg: BigInt!
  glpSupply: BigInt!
  usdgAmount: BigInt!
  amountOut: BigInt!

  timestamp: Int!
}

type HourlyGlpStat @entity {
  id: ID!

  glpSupply: BigInt!
  aumInUsdg: BigInt!
}

type Swap @entity {
  id: ID!

  account: String!
  tokenIn: String!
  tokenOut: String!

  amountIn: BigInt!
  amountOut: BigInt!
  amountOutAfterFees: BigInt!
  feeBasisPoints: BigInt!

  tokenInPrice: BigInt!

  transaction: Transaction!

  timestamp: Int!
}

type IncreasePosition @entity {
  id: ID!

  account: String!
  collateralToken: String!
  indexToken: String!

  key: String!

  isLong: Boolean!

  collateralDelta: BigInt!
  sizeDelta: BigInt!
  price: BigInt!
  fee: BigInt!

  timestamp: Int!
}

type DecreasePosition @entity {
  id: ID!

  account: String!
  collateralToken: String!
  indexToken: String!

  key: String!

  isLong: Boolean!

  collateralDelta: BigInt!
  sizeDelta: BigInt!
  price: BigInt!
  fee: BigInt!

  timestamp: Int!
}

type HourlyVolume @entity {
  id: ID!

  margin: BigInt!
  swap: BigInt!
  liquidation: BigInt!
  mint: BigInt!
  burn: BigInt!
}

type HourlyVolumeBySource @entity {
  id: ID!

  source: Bytes!
  timestamp: Int!

  margin: BigInt!
  swap: BigInt!
  liquidation: BigInt!
  mint: BigInt!
  burn: BigInt!
}

type HourlyVolumeByToken @entity {
  id: ID!

  tokenA: Bytes!
  tokenB: Bytes!
  timestamp: Int!

  margin: BigInt!
  swap: BigInt!
  liquidation: BigInt!
  mint: BigInt!
  burn: BigInt!
}

type HourlyFee @entity {
  id: ID!

  margin: BigInt!
  swap: BigInt!
  liquidation: BigInt!
  mint: BigInt!
  burn: BigInt!
}

type Transaction @entity {
  id: ID!

  from: String!
  to: String!
}